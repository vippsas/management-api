openapi: 3.0.0
info:
  title: Vipps MobilePay Management API
  version: "1.1.0"
  description: |-
    The Management API lets partners and merchants manage their sales units, etc.
    See the [API Guide](https://developer.vippsmobilepay.com/docs/APIs/management-api).

    **Please note:** The Management API documentation contains both available functionality,
    and functionality on the idea stage. See each endpoint and the API guide for details.
  contact:
    name: Vipps MobilePay AS
    url: "https://developer.vippsmobilepay.com/"
servers:
  - url: https://api.vipps.no
    description: Production environment (uses the production API keys, the official app and live data)
  - url: https://apitest.vipps.no
    description: Test environment (uses the test API keys, the test app and test data)
tags:
  - name: Merchants
    description: |-
      Functionality for managing merchants.
      Merchants can to this on
      [portal.vipps.no](https://portal.vipps.no).
  - name: Sales units
    description: |-
      Functionality for managing sales units.
      Merchants can to this on
      [portal.vipps.no](https://portal.vipps.no).
  - name: Product orders
    description: |-
      Functionality for managing product orders.
      Merchants can to this on
      [portal.vipps.no](https://portal.vipps.no).
  - name: Partners
    description: |-
      Functionality for (or about) partners. See:
      [Vipps Partners](https://developer.vippsmobilepay.com/docs/partner/).
  - name: API quality
    description: |-
      Information about a partner's or merchant's API usage quality.
      The data is the same as on the API Dashboard:
      https://developer.vippsmobilepay.com/docs/developer-resources/api-dashboard/

security:
  - Bearer-Authorization: []
    Ocp-Apim-Subscription-Key: []

paths:

  /management/v1/partners/whoami:
    get:
      tags:
        - Partners
      summary:  Get information about a partner.
      description: |-
        Status: Idea/proposal.

        For partners using
        [partner keys](https://developer.vippsmobilepay.com/docs/partner/partner-keys):
        Get details for the partner that is making the request.
        An endpoint where a partner can fetch the information stored about them.
      operationId: getPartnerWhoami
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/GetPartnerResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/partners/price-packages:
    get:
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      tags:
        - Partners
      summary: Get price packages for a partner.
      description: |-
        Status: Available.

        The price packages can have different names and percentages.
        Each price packages has a unique id: `pricePackageId`.
        This endpoint lets partners get an overview of their price packages.
        The `pricePackageId` is also used for the pre-fill endpoint:
        `POST:/product-orders`.
      operationId: getPartnerPricePackages
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/GetPartnerPricePackagesResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/product-orders/{product-order-id}:
    parameters:
      - $ref: "#/components/parameters/Merchant-Serial-Number"
      - $ref: "#/components/parameters/Vipps-System-Name"
      - $ref: "#/components/parameters/Vipps-System-Version"
      - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
      - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      - name: product-order-id
        in: path
        description: The product order's id
        required: true
        schema:
          minLength: 3
          maxLength: 10
          pattern: ^\d{3,10}$
          type: string
          example: 12345
    get:
      tags:
      - Product orders
      summary: Get information about a product order
      operationId: productOrderDetails
      description: |-
        Status: Idea/proposal.

        For both merchants and partners.
        The best way to check the status of a product order is on portal.vipps.no.
        **Please note:** There are strict rules for what information Vipps MobilePay is allowed to share with
        a partner, as this requires active consent from the merchant, and the merchant must also
        be able to withdraw the consent.
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ProductOrderDetailsResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - Product orders
      summary: Delete a product order
      operationId: deleteProductOrder
      description: |-
        Status: Idea/proposal.
      
        Undo: To be used if a PO is sent by mistake, etc.
      responses:
        "200":
          description: OK
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/product-orders:
    parameters: []
    post:
      summary: Pre-fill a product order on behalf of a merchant
      operationId: orderProduct
      description: |
        Status: Available.

        Submit data that pre-fills the order form on portal.vipps.no,
        so the merchant can review the information and submit the product order.

        Please note that `complianceData` and `website` information are required for the `VIPPS_PA_NETT` product type.
        Partners can still submit the product orders without it, but the merchant will have to fill
        in compliance data and website information manually in the merchant portal product order form and submit,
        and this is a common source of problems.

        We have made as many of the fields as possible optional, but please
        try to send as much as you can, to make it easy for the merchant and
        make the processing as fast as possible.

        **IMPORTANT:** Please provide all the necessary details, so it will not be necessary for us
        to request more details. This is the most common reason for delays. See:
        https://developer.vippsmobilepay.com/docs/partner/#typical-reasons-for-delays
      tags:
        - Product orders
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - $ref: "#/components/parameters/Idempotency-Key"
      requestBody:
        description: Product order for a merchant request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductOrderRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductOrderResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/merchants:
    get:
      tags:
        - Merchants
      summary: Get all merchants
      description: |-
        Status: Idea/proposal.

        For partners.
        Get a (long) list of all merchants that have one or more sale units registered with the partner making the API call.
      operationId: getAllMerchants
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/GetAllMerchantsResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/merchants/{business-identifier}:
    get:
      tags:
        - Merchants
      summary: Get a merchant by by organization number
      description: |-
        Status: Available in Q3.
        
        Get basic information about a merchant.
        **Please note:** There are strict rules for what information Vipps MobilePay is allowed to share with
        a partner, as this requires active consent from the merchant, and the merchant must also
        be able to withdraw the consent.
      operationId: getMerchantBusinessIdentifier
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - name: business-identifier
          in: path
          description: The organization number for the merchant
          required: true
          schema:
            minLength: 10
            maxLength: 30
            type: string
            example: "business:NO:ORG/987654321"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/GetMerchantResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/merchants/{business-identifier}/contracts:
    get:
      tags:
        - Merchants
      summary: Get a merchant's contract(s)
      description: |-
        Status: Idea/proposal.

        May return a (link to a) PDF.
      operationId: getMerchantContracts
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - name: business-identifier
          in: path
          description: The organization number for the merchant
          required: true
          schema:
            minLength: 10
            maxLength: 30
            type: string
            example: "business:NO:ORG/987654321"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/GetMerchantContractsResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/merchants/{business-identifier}/sales-units:
    get:
      tags:
        - Merchants
      summary: Get sales units for a merchant by by organization number
      description: |-
        Status: Available.

        Get a list of sales units (MSNs) for the merchant.
        When used by a partner: Only returns sales units connected to the partner.
      operationId: getMerchantSalesUnits
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - name: business-identifier
          in: path
          description: The organization number for the merchant
          required: true
          schema:
            minLength: 10
            maxLength: 30
            type: string
            example: "business:NO:ORG/987654321"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getMsnResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/sales-units:
    get:
      tags:
        - Sales units
      summary: Get all sales units that a merchant or partner has access to.
      description: |-
        Status: Idea/proposal.

        For partners using
        [partner keys](https://developer.vippsmobilepay.com/docs/partner/partner-keys):
        Get a (long) list of all sales units registered with the partner making the API call.
      operationId: getAllSalesUnits
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getMsnResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/sales-units/{msn}:
    get:
      tags:
        - Sales units
      summary: Get sales unit details based on MSN
      description: |-
        Status: Available.

        Eliminates the need to contact the merchant or Vipps MobilePay
        to get information about the sales units.
      operationId: getMsn
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - name: msn
          in: path
          description: The Vipps MSN (merchant serial number) for the sales unit.
          required: true
          schema:
            minLength: 5
            maxLength: 6
            pattern: ^\d{5,6}$
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/SalesUnit"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

    patch:
      tags:
        - Sales units
      summary: Update sales unit
      description: |-
        Status: Idea/proposal.

        Change the sales unit's name, logo, possibly more.
      operationId: updateMsn
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - name: msn
          in: path
          description: The Vipps MSN (merchant serial number) for the sales unit.
          required: true
          schema:
            minLength: 5
            maxLength: 6
            pattern: ^\d{5,6}$
            type: string
      requestBody:
        description: What to patch
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateMsn'
      responses:
        "200":
          description: OK
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /management/v1/api-quality/sales-units/{msn}:
    get:
      tags:
        - API quality
      summary: "Get API quality info: Errors, etc"
      description: |-
        Status: Idea/proposal.

        We want all API integrations to be without errors.
        All merchants can check the
        [API Dashboard](https://developer.vippsmobilepay.com/docs/developer-resources/api-dashboard/).
        Partners are contractually required to monitor for errors (and correct problems quickly),
        and this endpoint makes that work much easier.
        The underlying data is the same as used by the API Dashboard.        
      operationId: getApiQuality
      parameters:
        - $ref: "#/components/parameters/Merchant-Serial-Number"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
        - name: msn
          in: path
          description: The Vipps MSN (merchant serial number) for the sales unit.
          required: true
          schema:
            minLength: 5
            maxLength: 6
            pattern: ^\d{5,6}$
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ApiQualityResponse"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

components:

  securitySchemes:
    Bearer-Authorization:
      type: http
      scheme: bearer
      description: |-
        The access token is a base64-encoded string that is required for all API calls.
        It is a JWT (JSON Web Token).
        The access token is fetched from the
        [`POST:/accesstoken/get`](https://developer.vippsmobilepay.com/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        endpoint.
        It is valid for 1 hour in the test environment and 24 hours in the production environment.

    Ocp-Apim-Subscription-Key:
      type: apiKey
      in: header
      name: Ocp-Apim-Subscription-Key
      description: |-
        The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
        Keep it secret. Usually looks similar to this: 0f14ebcab0ec4b29ae0cb90d91b4a84a

  schemas:
    
    ExtraDetails:
      type: object
      properties:
        key:
          type: string
          example: "CustomErrorCode"
          description: Key
        value:
          type: string
          example: "9000"
          description: Value
    
    ProductOrderRequest:
      title: Product Order Request for a merchant
      required:
        - businessIdentifier
        - productType
      properties:
        businessIdentifier:
          $ref: "#/components/schemas/businessIdentifier"
        salesUnitName:
          nullable: true
          type: string
          pattern: '^[\p{L}\p{M}\d\\(\)-_\+\s\.]+$'
          minLength: 1
          maxLength: 30
          example: ACME Fantastic Fitness
          description: |-
            The name of the point of sale that will be shown to the users in
            the Vipps app and on the Vipps landing page.
            The sales unit name can be edited later on portal.vipps.no.
        salesUnitLogo:
          nullable: true
          type: string
          format: byte
          example: "VGhlIGltYWdlIGdvZXMgaGVyZQ=="
          description: |
            Base64 encoded string of the logo of the merchant.
            The logo will be displayed in the Vipps app, both when paying and on receipts and also in Vipps landing page.
            The logo must be in PNG (Portable Network Graphics) format.
            Square images are recommended.
            The longest side can not be more than 1000 pixels.
            The minimum size is 100 x 100 pixels.
            Images not matching the above criteria will not be shown to the merchant in the merchant portal.
            The logo can be edited later on portal.vipps.no.
        settlementAccountNumber:
          $ref: '#/components/schemas/bankAccountBBAN'
        pricePackageId:
          type: string
          format: uuid
          example: "8a11afb7-c223-48ed-8ca6-4722b97261aa"
          nullable: true
          description: |-
            Only for `productType`: `VIPPS_PA_NETT` and `VIPPS_I_KASSA`.
            The id for one of the price packages that are registered for the
            partner in the Vipps system.
            **Please note:** This is a UUID, _*not*_ the 3-digit key.
            If this field is not provided, the merchant must select the price manually.
        productType:
          type: string
          enum:
            - VIPPS_PA_NETT
            - VIPPS_LOGG_INN
            - VIPPS_CHECKOUT
            - VIPPS_I_KASSA
          x-enum-varnames:
            - VIPPS_PA_NETT
            - VIPPS_LOGG_INN
            - VIPPS_CHECKOUT
            - VIPPS_I_KASSA
          example: VIPPS_PA_NETT
          description: The type of product ordered for the merchant.
        productUseCase:
          type: string
          enum:
            - Website
            - WebsiteWithTest
            - App
            - Unknown
          example: WebsiteWithTest
          description: |-
            Where will sales take place?
            A website?
            A website that is not yet launched, so a test website must be used?
            A native app?
            Something else?
        annualTurnover:
          type: integer
          minimum: 0
          maximum: 999999999
          format: int64
          description: Annual turnover for the merchant in NOK (without øre).
          example: 100000
        intendedPurpose:
          type: string
          description: |-
            Description (explanation) of the product or products that will be sold.
            Include all information relevant to processing the product order, so the 
            processing of the application can be as efficient as possible. 
            This can include hints such as specifying "POS integration in physical store"
            to indicate that the sales unit needs `skipLandingPage` activated.
          example: |-
            Gym membership for accessing the gym's facilities.
            Guest will be not physically present when buying the subscription,
            as that is done on the gym's website.
          nullable: true
        website:
          nullable: true
          type: object
          required:
            - url
            - termsUrl
          properties:
            url:
              type: string
              format: URL
              pattern: '^(https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$'
              description: For 'WebsiteWithTest' or 'Website'. The URL to the merchant's website
              example: "https://example.com"
            termsUrl:
              type: string
              format: URL
              pattern: '^(https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$'
              description: The URL that points to the merchants sales terms
              example: "https://example.com/terms-and-conditions"
            testWebsiteUrl:
              nullable: true
              type: string
              format: URL
              pattern: '^(https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$'
              description: For 'WebsiteWithTest'. The URL to the merchants test website
              example: "https://example.com/test "
            testWebsiteUsername:
              nullable: true
              type: string
              description: For 'WebsiteWithTest'. Username to log in on the test website
              example: test-user
            testWebsitePassword:
              nullable: true
              type: string
              description: For 'WebsiteWithTest'. Password to log in on the test website
              example: test-password
        complianceData:
          nullable: true
          type: object
          properties:
            giftCard:
              nullable: true
              type: object
              required:
                - isSalesPercentageLessThanTen
              properties:
                isSalesPercentageLessThanTen:
                  type: boolean
                  default: false
                  description: The percentage the giftcard sales consists of. Either 'Less than 10%' or '10% and more'
                  example: false
                validityDuration:
                  type: string
                  description: "If 'isSalesPercentageLessThanTen' is true: For how long is the gift card valid after purchase?"
                  example: 3 years
                  nullable: true
                giftCardTurnoverShare:
                  type: string
                  description: "If 'isSalesPercentageLessThanTen' is true: What percentage of total sales are giftcards?"
                  example: about 25%
                  nullable: true
            membership:
              nullable: true
              type: object
              required:
                - turnoverShare
                - periodDistribution
              properties:
                turnoverShare:
                  type: string
                  description: Estimated turnover share of membership sales in percentage
                  example: about 25%
                membershipValidity:
                  type: string
                  enum:
                    - CurrentCalendarYear
                    - OneYearFromPayment
                  example: CurrentCalendarYear
                  description: Is the membership valid from the current calendar year or 1 year from payment?
                periodDistribution:
                  type: string
                  description: Distribution of memberships in different periods that is being sold
                  example: 50% yearly 20% monthly
            subscription:
              nullable: true
              type: object
              required:
                - turnoverShare
                - periodDistribution
              properties:
                turnoverShare:
                  type: string
                  description: Estimated turnover share of subscription sales in percentage
                  example: about 25%
                periodDistribution:
                  type: string
                  description: Distribution of subscriptions in different periods that is being sold
                  example: 50% yearly 20% monthly
            course:
              nullable: true
              type: object
              required:
                - turnoverShare
                - timeBeforeOrder
                - period
                - online
              properties:
                turnoverShare:
                  type: string
                  description: Estimated turnover share of course sales in percentage
                  example: about 25%
                timeBeforeOrder:
                  type: string
                  description: How long in advance it is common to order and pay for a course
                  example: 10 days
                period:
                  type: string
                  description: How long the duration of a course usually is
                  example: once every 6. week
                isOnlineCourseOffered:
                  type: boolean
                  description: True if there are online courses offered
                  default: false
                  example: false
                  nullable: true
                onlineAccessibleTime:
                  type: string
                  description: How long after purchase does a user have access to the course
                  example: for 3 months
                  nullable: true
            ticket:
              nullable: true
              type: object
              required:
                - turnoverShare
                - prepurchaseTime
              properties:
                turnoverShare:
                  type: string
                  description: Estimated turnover share of ticket sales in percentage
                  example: about 25%
                prepurchaseTime:
                  type: string
                  description: How long in advance of an event it is common to order and pay for a ticket
                  example: 10 weeks
            rent:
              nullable: true
              type: object
              required:
                - turnoverShare
                - prepurchaseTime
                - averageRentalDuration
              properties:
                turnoverShare:
                  type: string
                  description: Estimated turnover share of rent sales in percentage
                  example: about 25%
                prepurchaseTime:
                  type: string
                  description: How long in advance of the rental period it is common to order and pay
                  example: 15 days
                averageRentalDuration:
                  type: string
                  description: How long the average rental period is
                  example: 3 weeks
            prepaidServices:
              nullable: true
              type: object
              required:
                - turnoverShare
                - prepurchaseTime
              properties:
                turnoverShare:
                  type: string
                  description: Estimated turnover share of prepaid services sales in percentage
                  example: about 25%
                prepurchaseTime:
                  type: string
                  description: How long in advance of a service it is common to order and pay
                  example: 10 weeks
            donation:
              nullable: true
              type: object
              required:
                - acceptsDonation
              properties:
                acceptsDonation:
                  type: boolean
                  description: true if merchant will receive donation through Vipps
                  default: false
                  example: false
    
    ProductOrderResponse:
      title: Product Order response
      type: object
      properties:
        prefilledOrderId:
          type: string
          format: uuid
          description: A UUID reference that identifies the product order request submitted by the partner.
          example: 81b83246-5c19-7b94-875b-ea6d1114f099
        prefillUrl:
          type: string
          format: uri
          description: A URL for the merchant to the pre-filled product order to complete the signup.
          example: "https://portal.vipps.no/register/vippspanett/81b83246-5c19-7b94-875b-ea6d1114f099"
    
    ProductOrderDetailsResponse:
      title: Product order details response
      description: |-
        **Please note:** There are strict rules for what information Vipps MobilePay is allowed to share with
        a partner, as this requires active consent from the merchant, and the merchant must also
        be able to withdraw the consent.
      type: object
      properties:
        prefilledOrderId:
          type: string
          format: uuid
          description: A UUID reference that identifies the product order request submitted.
          example: 81b83246-5c19-7b94-875b-ea6d1114f099
        prefillStatus:
          type: string
          description: The status of the PO
          enum:
            - ACCESSED
            - RECEIVED
            - PROCESSING
            - WAITING_FOR_MERCHANT
            - COMPLETED
          example: ACCESSED

    ApiQualityResponse:
      title: API quality response
      type: object
      required:
        - ApiQualityItems
      properties:
        ApiQualityItems:
          type: array
          description: List of API endpoint quality items.
          items:
            $ref: '#/components/schemas/ApiQualityEndpointData'

    ApiQualityEndpointData:
      title: API quality item
      description: Quality stats for the use of one API endpoint.
      type: object
      properties:
        endpoint:
          type: string
          description: URL of the endpoint
          example: "POST:/epayment/v1/payments"
        total Requests: 
          type: number
          description: The number of requests to this endpoint.
          example: 1000
        successRate: 
          type: number
          description: The percentage of successful (HTTP 2XX) requests.
          example: 95
        status200: 
          type: integer 
          description: The number of `HTTP 200 OK` responses.
          example: 950
        status400:
          type: integer
          description: The number of `HTTP 400 Bad Request` responses.
          example: 10         
        status401: 
          type: integer 
          description: The number of `HTTP 401 Unauthorized` responses.
          example: 10         
        status403: 
          type: integer
          description: The number of `HTTP 402 Forbidden` responses.
          example: 10         
        status404: 
          type: integer
          description: The number of `HTTP 404 Not Found` responses.
          example: 10          
        status429: 
          type: integer
          description: The number of `HTTP 429 Too Many Requests` responses.
          example: 10          
        status500: 
          type: integer
          description: The number of `HTTP 500 Server Error` responses.
          example: 0         


    SalesUnit:
      description: Details of a sales unit. More properties may be added at a later date.
      required:
        - msn
        - name
        - businessIdentifier
      type: object
      properties:
        msn:
          $ref: '#/components/schemas/MSN'
        name:
          type: string
          description: "The sales unit's name"
          example: "ACME Fantastic Fitness"
          x-order: 5
        businessIdentifier:
          $ref: "#/components/schemas/businessIdentifier"
        configuration:
          type: object
          description: |-
            Additional details that might or might not be available. In the case that any of these are not provided, it doesn't mean that those details don't apply.
          properties:
            paymentAllowed:
              type: boolean
              description: |-
                This is `true` if the sales unit is allowed to make payments. The most common cause for this being false is the that sales unit only being approved for the Login API.
              example: false
            captureType:
              type: string
              description: |-
                The capture type of the sales unit.
                We strongly recommend `ReserveCapture`, see the API
                documentation: https://developer.vippsmobilepay.com/docs/faqs/reserve-and-capture-faq
              enum:
                - "ReserveCapture"
                - "DirectCapture"
                - "NotApplicable"
              default: "ReserveCapture"
              example: "ReserveCapture"  
            skipLandingPageAllowed:
              type: boolean
              description: |-
                This is `true` if the merchant has access to sending `skipLandingPage` for eCom API requests.
                See the [landing page](https://developer.vippsmobilepay.com/docs/common-topics/landing-page/).
              example: false
            recurringAllowed:
              type: boolean
              description: |-
                This is `true` is the sales unit has access to the Vipps Recurring API.
                Vipps is required to perform some extra
                compliance checks before activating the Vipps Recurring API.
                See: https://developer.vippsmobilepay.com/docs/APIs/recurring-api
              example: false
    
    GetPartnerResponse:
      required:
        - partnerId
        - name
      type: object
      properties:
        partnerId:
          minLength: 3
          maxLength: 10
          pattern: ^\d{3,10}$
          type: string
          description: Partner id
          example: "123456"
        name:
          type: string
          description: "The partner's name"
          example: "ACME Partner Inc"
        level:
          type: string
          description: |-
            The partner's level.
            See: https://developer.vippsmobilepay.com/docs/partner/partner-level-up/
          enum:
            - "Vipps Partner"
            - "Vipps Partner Plus"
            - "Vipps Partner Premium"
          example: "Vipps Partner Premium"
        partnerContactName:
          type: string
          description: The partner's contact person in Vipps MobilePay.
          example: "firstName lastName"
        partnerContactEmail:
          type: string
          description: The partner's contact person's email address.
          example: "firstname.lastname@vippsmobilepay.com"
        status:
          type: string
          description: Status of the partner
          enum:
            - PENDING
            - ACTIVE
            - DEACTIVATED
          default: ACTIVE
          example: ACTIVE  

    GetPartnerPricePackagesResponse:
      description: List of the partner's price packages
      type: array
      items:
        $ref: '#/components/schemas/PricePackage'
    
    Merchant:
      description: A merchant
      required:
        - businessIdentifier
        - name
      type: object
      properties:
        businessidentifier:
          $ref: '#/components/schemas/businessIdentifier'
        name:
          type: string
          description: The name of the merchant
          minLength: 1
          maxLength: 50
          example: ACME Fantastic Fitness
        status:
          type: string
          description: Status of the merchant.
          enum:
            - ACTIVE
            - DEACTIVATED
          default: ACTIVE
          example: ACTIVE  
        createdAt:
          type: string
          description: The timestamp (ISO-8601) for when the merchant was created.
          format: date-time
          example: "2022-09-02T06:45:25.921251Z"
        updateddAt:
          type: string
          description: The timestamp (ISO-8601) for when the merchant was updated (if it has been updated).
          format: date-time
          example: "2022-09-02T06:45:25.921251Z"
        countryCode":
          type: string
          description: The merchant's country code, ISO 3166-2 (two capital letters).
          pattern: '^[A-Z]{2}$'
          example: "NO"
        businessAddress:
          $ref: '#/components/schemas/Address'
        businesspostlAddress:
          $ref: '#/components/schemas/Address'          

    bankAccountBBAN:
      title: Bank account in BBAN format. ISO 13616.
      type: object
      required:
        - scheme
        - id
      properties:
        scheme:
          type: string
          description: The type of identifier for the bank.
          minLength: 5
          maxLength: 20
          example: "BBAN:NO"
        id:
          type: string
          description: The account number (or id).
          minLength: 9
          maxLength: 20
          pattern: ^\d{9,}$
          example: "86011117947"

    bankAccountIBAN:
      title: Bank account in IBAN format. ISO 13616.
      type: object
      required:
        - scheme
        - id
      properties:
        scheme:
          type: string
          description: The type of identifier for the bank.
          minLength: 5
          maxLength: 20
          example: "IBAN:NO"
        id:
          type: string
          description: The account number (or id). No whitespace.
          minLength: 9
          maxLength: 20
          example: "NO9386011117947"      

    Address:
      title: Address
      type: object
      required:
        - lines
        - postCode
        - city
        - country
      properties:
        city:
          type: string
          example: Oslo
        country:
          type: string
          example: 'NO'
          pattern: '^[A-Z]{2}$'
          description: Country code according to ISO 3166-2 (two capital letters).
        id:
          type: string
          format: uuid
          description: 'Unique ID of the address, always provided in response from Vipps MobilePay.'
        lines:
          type: array
          description: 'Array of addressLines, for example street name, number, etc.'
          items:
            type: string
            example: Robert Levins gate 5
        postCode:
          type: string
          description: Postcode of the address in local country format.
          example: '0154'

    GetMerchantResponse:
      description: Response of a successful get merchant(s) operation
      type: object
      properties:
        merchant:
          $ref: '#/components/schemas/Merchant'
    
    GetAllMerchantsResponse:
      description: List of the merchants a partner has access to
      type: object
      required:
        - merchants  
      properties:
        merchants:
          type: array
          description: List of merchants
          items:
            $ref: '#/components/schemas/Merchant'

    getMsnResponse:
      description: List of MSNs (merchant serial numbers), that the calling partner has access to.
      type: array
      items:
        $ref: '#/components/schemas/MsnInfo'

    GetMerchantContractsResponse:
      description: "Response of a successful get contracts operation"
      required:
        - urls
      type: object
      properties:
        urls:
          description: List of URLs to download PDF contracts
          items:
            type: string
            description: URL for downloading PDF contract
            example: "https://example.com/contracts/contract-12345.pdf"

    MSN:
      description: "MSN (merchant serial number): The identifier of the sales unit." 
      type: string
      minLength: 5 
      maxLength: 6
      pattern: ^\d{5,6}$
      example: 123456

    MsnInfo:
      description: High-level details about a MSN
      type: object
      required:
        - msn
        - name
      properties:
        msn:
          $ref: '#/components/schemas/MSN'
        name:
          type: string
          description: The name of the sales unit.
          maxLength: 50
          example: ACME Fantastic Fitness

    updateMsn:
      title: updateMsn
      type: object
      properties:
        name:
          type: string
          description: Name of the sales unit.
          example: ACME Fantastic Fitness Deluxe
          maxLength: 50
        salesUnitLogo:
          type: string
          format: byte
          example: "VGhlIGltYWdlIGdvZXMgaGVyZQ=="
          description: |
            Base64 encoded string of the logo of the merchant.
            The logo will be displayed in the Vipps app, both when paying and on receipts and also in Vipps landing page.
            The logo must be in PNG (Portable Network Graphics) format.
            Square images are recommended.
            The longest side can not be more than 1000 pixels.
            The minimum size is 100 x 100 pixels.
            Images not matching the above criteria will not be shown to the merchant in the merchant portal.
            The logo can be edited later on portal.vipps.no.
        status:
          type: string
          description: |-
            Status of the sales unit.
            This may be used to activate and deactivate a sales unit.
          enum:
            - ACTIVE
            - DEACTIVATED
          default: ACTIVE
          example: ACTIVE
    
    businessIdentifier:
      type: object
      description: |-
        Business registration number of the merchant for whom the partner is submitting the product order.
        Only Norwegian (`business:NO:ORG``) business registration numbers are allowed for now, but this format supports all countries.
      required:
        - scheme
        - id
      properties:
        scheme:
          type: string
          description: The type of identifier for the business.
          minLength: 10
          maxLength: 20
          example: "business:NO:ORG"
        id:
          type: string
          description: The business identifier.
          pattern: ^\d{9}$
          example: "9876543221"

    PricePackage:
      required:
        - pricePackageId
        - name
      type: object
      properties:
        pricePackageId:
          type: string
          description: The unique id for the price package
          format: uuid
          example: "8a11afb7-c223-48ed-8ca6-4722b97261aa"
        name:
          type: string
          description: The price package' name
          maxLength: 30
          example: "POS standard"
        description:
          type: string
          description: A short human-readable summary of the price.
          maxLength: 6
          example: "2.99%"
        visibleInSignupForm:
          type: boolean
          description: |-
            An boolean indicating if the price package is visible for merchants to order on their own in our signup forms.
          example: True
        productType:
          type: string
          enum:
            - ePayment
            - ePaymentCustomerPresent

    Problem:
      title: Problem
      type: object
      properties:
        type:
          type: string
          format: uri
          example: "https://example.com/problem/unauthorized"
          description: A URI reference that identifies the problem type.
        title:
          type: string
          example: "Not authorized to create a product order"
          description: "A short, human-readable summary of the problem type.  It will not change from occurrence to occurrence of the problem."
        status:
          type: integer
          description: The HTTP response code
          example: 401
        detail:
          type: string
          example: "Not authorized to create a product order. Check whether Authorization token and Ocp-Apim-Subscription-Key are correct."
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          example: "/products/orders"
          description: A URI reference that identifies the specific occurrence of the problem
        traceId:
          type: string
          example: "81b83246-5c19-7b94-875b-ea6d1114f099"
          description: An id that can be used to facilitate in tracing the error.
        extraDetails:
          type: array
          items:
            $ref: "#/components/schemas/ExtraDetails"
  
  parameters:
    Vipps-System-Name:
      name: Vipps-System-Name
      required: true
      in: header
      description: |-
        The name of the solution. One word in lowercase letters is good.
        See [HTTP headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
      example: woocommerce
    
    Vipps-System-Version:
      name: Vipps-System-Version
      required: true
      in: header
      description: |-
        The version number of the solution.
        See [HTTP headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
      example: "5.4"
    
    Vipps-System-Plugin-Name:
      name: Vipps-System-Plugin-Name
      required: true
      in: header
      description: |-
        The name of the plugin. One word in lowercase letters is good.
        See [HTTP headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
      example: "vipps-woocommerce"
    
    Vipps-System-Plugin-Version:
      name: Vipps-System-Plugin-Version
      in: header
      required: true
      description: |-
        The version number of the plugin.
        See [HTTP headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
      example: "1.2.1"

    Idempotency-Key:
      in: header
      name: Idempotency-Key
      description: |-
        An Idempotency key must be provided to ensure idempotent requests.
      required: true
      schema:
        type: string
        maxLength: 50
        pattern: ^[a-zA-Z0-9-]{1,50}$
        example: kRk3uEeiogxLu1yGSZRlNgsIv3TuNS

    Merchant-Serial-Number:
      name: Merchant-Serial-Number
      in: header
      description: |-
        The Merchant Serial Number (MSN) is a unique id for the sale unit
        that this payment is made for.
        This is a required parameter if you are a partner
        making payments on behalf of a merchant.
        The partner must use the merchant's MSN (not the partner's MSN).
        This parameter is optional, and recommended, for regular Vipps
        merchants making payments for themselves.
      schema:
        type: string
      example: 123456

    msn:
      name: msn
      in: path
      description: "MSN ((merchant serial number): The identifier of the sales unit." 
      required: true
      schema:
        minLength: 5 
        maxLength: 6
        pattern: ^\d{5,6}$
        type: string
        example: 123456
